var codes = {
  RC_FILE_NOT_FOUND:1,
  RC_FILE_HANDLE_NOT_INIT:2,
  RC_WRITE_FAILED:3,
  RC_READ_NON_EXISTING_PAGE:4,
  RC_READ_FAILED:5,
  RC_PAGE_NUMBER_OUT_OF_BOUNDRY:6,
  RC_FILE_EXIST:7,

  RC_SET_POINTER_FAILED:100,
  RC_GET_NUMBER_OF_BYTES_FAILED:101,

  RC_RM_COMPARE_VALUE_OF_DIFFERENT_DATATYPE:200,
  RC_RM_EXPR_RESULT_IS_NOT_BOOLEAN:201,
  RC_RM_BOOLEAN_EXPR_ARG_IS_NOT_BOOLEAN:202,
  RC_RM_NO_MORE_TUPLES:203,
  RC_RM_NO_PRINT_FOR_DATATYPE:204,
  RC_RM_UNKOWN_DATATYPE:205,

  RC_IM_KEY_NOT_FOUND:300,
  RC_IM_KEY_ALREADY_EXISTS:301,
  RC_IM_N_TO_LAGE:302,
  RC_IM_NO_MORE_ENTRIES:303,

  RC_BM_NO_BUFFER_AVAILBLE:400,
};

var type = {
  RC_FILE_NOT_FOUND:'RC_FILE_NOT_FOUND',
  RC_FILE_HANDLE_NOT_INIT:'RC_FILE_HANDLE_NOT_INIT',
  RC_WRITE_FAILED:'RC_WRITE_FAILED',
  RC_READ_NON_EXISTING_PAGE:'RC_READ_NON_EXISTING_PAGE',
  RC_READ_FAILED:'RC_READ_FAILED',
  RC_PAGE_NUMBER_OUT_OF_BOUNDRY:'RC_PAGE_NUMBER_OUT_OF_BOUNDRY',
  RC_FILE_EXIST:'RC_FILE_EXIST',

  RC_SET_POINTER_FAILED:'RC_SET_POINTER_FAILED',
  RC_GET_NUMBER_OF_BYTES_FAILED:'RC_GET_NUMBER_OF_BYTES_FAILED',

  RC_RM_COMPARE_VALUE_OF_DIFFERENT_DATATYPE:'RC_RM_COMPARE_VALUE_OF_DIFFERENT_DATATYPE',
  RC_RM_EXPR_RESULT_IS_NOT_BOOLEAN:'RC_RM_EXPR_RESULT_IS_NOT_BOOLEAN',
  RC_RM_BOOLEAN_EXPR_ARG_IS_NOT_BOOLEAN:'RC_RM_BOOLEAN_EXPR_ARG_IS_NOT_BOOLEAN',
  RC_RM_NO_MORE_TUPLES:'RC_RM_NO_MORE_TUPLES',
  RC_RM_NO_PRINT_FOR_DATATYPE:'RC_RM_NO_PRINT_FOR_DATATYPE',
  RC_RM_UNKOWN_DATATYPE:'RC_RM_UNKOWN_DATATYPE',

  RC_IM_KEY_NOT_FOUND:'RC_IM_KEY_NOT_FOUND',
  RC_IM_KEY_ALREADY_EXISTS:'RC_IM_KEY_ALREADY_EXISTS',
  RC_IM_N_TO_LAGE:'RC_IM_N_TO_LAGE',
  RC_IM_NO_MORE_ENTRIES:'RC_IM_NO_MORE_ENTRIES',

  RC_BM_NO_BUFFER_AVAILBLE:'RC_BM_NO_BUFFER_AVAILBLE',
}

function DBError(message, code, extras) {
  Error.call(this);
  Error.captureStackTrace(this, this.constructor);

  this.message = message;
  if (code) {
  	this.code = codes[code];
    this.literalCode = code;
    if (!this.code) {
  		throw new Error("Invalid error code: " +  code);
  	}
  }
  if (extras) {
  	for(var k in extras) {
  		this[k] = extras[k];
  	}
  }
}

DBError.prototype = Object.create(Error.prototype);
DBError.prototype.constructor = DBError;
DBError.prototype.name        = 'DBError';
DBError.prototype.toString    = function () {
  return '[DBError ' + this.literalCode + ': ' + this.message + ']';
}

DBError.codes = codes;
DBError.type = type;


module.exports = DBError;
